import IndexableArray from "indexable-array";
import Db from "./db";
import Entity from "./base/entity";
import Table from "./entity/table";
import View from "./entity/view";
import Column from "./column";
import Type from "./base/type";
import DbObject, { DbObjectConstructorArgs } from "./base/db-object";
import MaterializedView from "./entity/materialized-view";
/** @ignore */
export interface SchemaConstructorArgs extends DbObjectConstructorArgs {
    oid: number;
    db: Db;
}
/**
 * Class which represent a PostgreSQL {@link Schema schema}. Provides attributes and methods for details of the {@link Schema schema}.
 */
export default class Schema extends DbObject {
    /** @ignore */
    constructor(args: SchemaConstructorArgs);
    /**
     * [[Db]] of the schema. Used by abstract class to get db of all db objects.
     *
     * @ignore
     */
    readonly _db: Db;
    /** Object identifier for the {@link Schema} */
    readonly oid: number;
    /**
     * All {@link Entity entities} ({@link Table tables} and {@link View views}) of the {@link Schema schema}
     * as an {@link IndexableArray indexable array} ordered by name.
     */
    get entities(): IndexableArray<Entity, "name", never, true>;
    /**
     * All {@link Table tables} of the {@link Schema schema} as an {@link IndexableArray indexable array} ordered by name.
     *
     * @example
     * const tableArray   = schema.tables;
     * const isAvailable  = schema.tables.has('person');
     * const table        = schema.tables.get('account');
     * const name         = table.name;
     *
     * schema.tables.forEach(table => console.log(table.name));
     */
    readonly tables: IndexableArray<Table, "name", never, true>;
    /**
     * All {@link View views} of the {@link Schema schema} as an {@link IndexableArray indexable array} ordered by name.
     *
     * @example
     * const viewArray    = schema.views;
     * const isAvailable  = schema.views.has('admin_person');
     * const view         = schema.views.get('big_account');
     * const name         = view.name;
     *
     * schema.views.forEach(view => console.log(view.name));
     */
    readonly views: IndexableArray<View, "name", never, true>;
    /**
     * All {@link MaterializedView materialized views} of the {@link Schema schema} as an {@link IndexableArray indexable array} ordered by name.
     *
     * @example
     * const mViewArray   = schema.materializedViews;
     * const isAvailable  = schema.materializedViews.has('admin_person');
     * const mView        = schema.materializedViews.get('big_account');
     * const name         = mView.name;
     *
     * schema.materializedViews.forEach(mView => console.log(mView.name));
     */
    readonly materializedViews: IndexableArray<MaterializedView, "name", never, true>;
    /**
     * All {@link Type custom database types} of the {@link Schema schema} as an {@link IndexableArray indexable array} ordered by name.
     *
     * @example
     * const typeArray    = schema.types;
     * const isAvailable  = schema.types.has('address');
     * const type         = schema.types.get('address');
     * const columns      = type.columns;
     */
    readonly types: IndexableArray<Type, "name", "shortName", true>;
    /**
     * {@link Schema} of the object.
     */
    readonly schema: Schema;
    get fullName(): string;
    /**
     * Returns {@link Table table}, {@link View view} or {@link Column column} on given path in {@link Schema schema}. Path should be in dot (.) notation.
     *
     * Note for TypeScript users: Since `get()` could return one of the many possible types, you may need to specify your expected type using `as`.
     * i.e. `const result = db.get("public.account") as Table`;
     *
     * @param path is the path of the requested item in dot (.) notation such as 'public.contact'
     * @returns requested {@link DbObject database object}.
     * @example
     * const table  = db.get('contact');      // Returns contact table in public schema.
     * const column = db.get('contact.name'); // Returns name column of the contact table.
     */
    get(path: string): Entity | Column;
}
//# sourceMappingURL=schema.d.ts.map