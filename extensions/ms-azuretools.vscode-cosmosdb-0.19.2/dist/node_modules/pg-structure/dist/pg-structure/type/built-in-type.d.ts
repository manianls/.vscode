import Type, { TypeConstructorArgs } from "../base/type";
import { TypeCategory } from "../../types";
/** @ignore */
export interface BultInTypeConstructorArgs extends TypeConstructorArgs {
    shortName?: string;
    internalName?: string;
    category: TypeCategory;
    hasLength?: boolean;
    hasScale?: boolean;
    hasPrecision?: boolean;
}
/**
 * Class which represent a built-in PostgreSQL {@link Type type}. Provides attributes and methods for details of the built-in {@link Type type}.
 */
export default class BuiltInType extends Type {
    /** @ignore */
    constructor(args: BultInTypeConstructorArgs);
    internalName: string;
    shortName: string;
    /**
     * An arbitrary classification of PostgreSQL data types that is used by the PostgreSQL parser
     * to determine which implicit casts should be “preferred”.
     * See related doc [here](https://www.postgresql.org/docs/current/catalog-pg-type.html#CATALOG-TYPCATEGORY-TABLE)
     */
    category: TypeCategory;
    /** Whether the type has length property. */
    hasLength: boolean;
    /** Whether the type has scale property. */
    hasScale: boolean;
    /** Whether the type has precision property. */
    hasPrecision: boolean;
}
//# sourceMappingURL=built-in-type.d.ts.map